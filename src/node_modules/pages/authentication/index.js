import React, { useState, useEffect, useContext} from 'react';
import {Link, Redirect} from 'react-router-dom';
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import {CurrentUserContext} from 'contexts/currentUser';
import BackendErrorMessage from './components/backendErrorMessages';

const Authentication = (props) => {
	const [email, setEmail] = useState('');
	const [password, setPassword] = useState('');
	const [username, setUsername] = useState('');
	const [isSuccessfulSubmit,setIsSuccessfulSubmit] = useState(false);
	const isLogin = props.match.path === '/login';
	const apiUrl = isLogin ? '/users/login' : '/users';
	const [{isLoading, response, error}, doFetch] = useFetch(apiUrl);
	
	const pageTitle = isLogin ? 'Sign In' : 'Sign Up';
	const descriptionLink = isLogin ? '/register' : '/login';
	const descriptionText = isLogin ? 'Need an Account?' : 'Have an account?';
	const [token, setToken] = useLocalStorage('token')
	const [, dispatch] = useContext(CurrentUserContext);

	useEffect(() => {
		if (!response) return;
		setToken(response.user.token);
		setIsSuccessfulSubmit(true);
		// setCurrentUserState(state => ({
    //   ...state,
    //   isLoggedIn: true,
    //   isLoading: false,
    //   currentUser: response.user
		// }))
		dispatch({type: 'SET_AUTHORIZED', payload: response.user})
	}, [response, setToken, dispatch])

	if (isSuccessfulSubmit) return <Redirect to="/"/>

	const handleSubmit = (e) => {
		e.preventDefault();
		const user = isLogin ? {email, password} : {email, password, username};

		doFetch({
			method: 'post',
			data: {
				user
			}
		})

	}

	return(
		<div className='auth-page'>
			<div className="container page">
				<div className="row">
					<div className="col-md-6 offset-md-3 col-xs-12">
						<h1 className='text-xs-center'>{pageTitle}</h1>
						<p className='text-xs-center'>
						<Link to={descriptionLink}>{descriptionText}</Link>
						</p>
						<form onSubmit={handleSubmit}>
							{error && <BackendErrorMessage backendErrors={error.errors} />}
							<fieldset>
								{!isLogin && (
										<fieldset className='form-group'>
											<input type="username"
														className="form-control form-control-lg"
														placeholder="username"
														onChange={(e) => setUsername(e.target.value)}
														value={username}
														/>
										</fieldset>
								) }
								<fieldset className='form-group'>
									<input type="email"
												 className="form-control form-control-lg"
												 placeholder="Email"
												 onChange={(e) => setEmail(e.target.value)}
												 value={email}
												/>
								</fieldset>
								<fieldset className='form-group'>
									<input type="password" 
												 className="form-control form-control-lg"
												 placeholder="Password"
												 onChange={(e) => setPassword(e.target.value)}
												 value={password} />
								</fieldset>
								<button 
												className="btn btn-lg btn-primary pull-xs-right"
												type="submit"
												disabled={isLoading}>
													{pageTitle}
								</button>
							</fieldset>
						</form>
					</div>
				</div>
			</div>
		</div>
	);
}
export default Authentication;